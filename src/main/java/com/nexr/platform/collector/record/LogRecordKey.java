// File generated by hadoop record compiler. Do not edit.
package com.nexr.platform.collector.record;

public class LogRecordKey extends org.apache.hadoop.record.Record {
	private static final org.apache.hadoop.record.meta.RecordTypeInfo _rio_recTypeInfo;
	private static org.apache.hadoop.record.meta.RecordTypeInfo _rio_rtiFilter;
	private static int[] _rio_rtiFilterFields;
	static {
		_rio_recTypeInfo = new org.apache.hadoop.record.meta.RecordTypeInfo(
				"ChukwaRecordKey");
		_rio_recTypeInfo.addField("logId",
				org.apache.hadoop.record.meta.TypeID.StringTypeID);
		_rio_recTypeInfo.addField("dataType",
				org.apache.hadoop.record.meta.TypeID.StringTypeID);
		_rio_recTypeInfo.addField("time",
				org.apache.hadoop.record.meta.TypeID.StringTypeID);
	}

	private String dataType;
	private String time;
	private String logId;

	public LogRecordKey() {
	}

	public LogRecordKey(final String dataType, final String time, final String logId) {
		this.logId = logId;
		this.dataType = dataType;
		this.time = time;
	}

	public static org.apache.hadoop.record.meta.RecordTypeInfo getTypeInfo() {
		return _rio_recTypeInfo;
	}

	public static void setTypeFilter(
			org.apache.hadoop.record.meta.RecordTypeInfo rti) {
		if (null == rti)
			return;
		_rio_rtiFilter = rti;
		_rio_rtiFilterFields = null;
	}

	private static void setupRtiFields() {
		if (null == _rio_rtiFilter)
			return;
		// we may already have done this
		if (null != _rio_rtiFilterFields)
			return;
		int _rio_i, _rio_j;
		_rio_rtiFilterFields = new int[_rio_rtiFilter.getFieldTypeInfos()
				.size()];
		for (_rio_i = 0; _rio_i < _rio_rtiFilterFields.length; _rio_i++) {
			_rio_rtiFilterFields[_rio_i] = 0;
		}
		java.util.Iterator<org.apache.hadoop.record.meta.FieldTypeInfo> _rio_itFilter = _rio_rtiFilter
				.getFieldTypeInfos().iterator();
		_rio_i = 0;
		while (_rio_itFilter.hasNext()) {
			org.apache.hadoop.record.meta.FieldTypeInfo _rio_tInfoFilter = _rio_itFilter
					.next();
			java.util.Iterator<org.apache.hadoop.record.meta.FieldTypeInfo> _rio_it = _rio_recTypeInfo
					.getFieldTypeInfos().iterator();
			_rio_j = 1;
			while (_rio_it.hasNext()) {
				org.apache.hadoop.record.meta.FieldTypeInfo _rio_tInfo = _rio_it
						.next();
				if (_rio_tInfo.equals(_rio_tInfoFilter)) {
					_rio_rtiFilterFields[_rio_i] = _rio_j;
					break;
				}
				_rio_j++;
			}
			_rio_i++;
		}
	}

	public String getDataType() {
		return dataType;
	}

	public void setDataType(final String dataType) {
		this.dataType = dataType;
	}

	public String getTime() {
		return time;
	}

	public void setTime(final String time) {
		this.time = time;
	}

	public String getLogId() {
		return logId;
	}

	public void setLogId(String logId) {
		this.logId = logId;
	}

	public void serialize(final org.apache.hadoop.record.RecordOutput _rio_a,
			final String _rio_tag) throws java.io.IOException {
		_rio_a.startRecord(this, _rio_tag);
		_rio_a.writeString(logId, "logId");
		_rio_a.writeString(dataType, "dataType");
		_rio_a.writeString(time, "time");
		_rio_a.endRecord(this, _rio_tag);
	}

	private void deserializeWithoutFilter(
			final org.apache.hadoop.record.RecordInput _rio_a,
			final String _rio_tag) throws java.io.IOException {
		_rio_a.startRecord(_rio_tag);
		logId = _rio_a.readString("logId");
		dataType = _rio_a.readString("dataType");
		time = _rio_a.readString("time");
		_rio_a.endRecord(_rio_tag);
	}

	public void deserialize(final org.apache.hadoop.record.RecordInput _rio_a,
			final String _rio_tag) throws java.io.IOException {
		if (null == _rio_rtiFilter) {
			deserializeWithoutFilter(_rio_a, _rio_tag);
			return;
		}
		// if we're here, we need to read based on version info
		_rio_a.startRecord(_rio_tag);
		setupRtiFields();
		for (int _rio_i = 0; _rio_i < _rio_rtiFilter.getFieldTypeInfos().size(); _rio_i++) {
			if (1 == _rio_rtiFilterFields[_rio_i]) {
				logId = _rio_a.readString("logId");
			} else if (2 == _rio_rtiFilterFields[_rio_i]) {
				dataType = _rio_a.readString("dataType");
			} else if (3 == _rio_rtiFilterFields[_rio_i]) {
				time = _rio_a.readString("time");
			}  else {
				java.util.ArrayList<org.apache.hadoop.record.meta.FieldTypeInfo> typeInfos = (java.util.ArrayList<org.apache.hadoop.record.meta.FieldTypeInfo>) (_rio_rtiFilter
						.getFieldTypeInfos());
				org.apache.hadoop.record.meta.Utils
						.skip(_rio_a, typeInfos.get(_rio_i).getFieldID(),
								typeInfos.get(_rio_i).getTypeID());
			}
		}
		_rio_a.endRecord(_rio_tag);
	}

	public int compareTo(final Object _rio_peer_) throws ClassCastException {
		if (!(_rio_peer_ instanceof LogRecordKey)) {
			throw new ClassCastException(
					"Comparing different types of records.");
		}
		LogRecordKey _rio_peer = (LogRecordKey) _rio_peer_;
		int _rio_ret = 0;
		_rio_ret = logId.compareTo(_rio_peer.logId);
		if (_rio_ret != 0)
			return _rio_ret;
		_rio_ret = dataType.compareTo(_rio_peer.dataType);
		if (_rio_ret != 0)
			return _rio_ret;
		_rio_ret = time.compareTo(_rio_peer.time);
		if (_rio_ret != 0)
			return _rio_ret;
		return _rio_ret;
		
	}

	public boolean equals(final Object _rio_peer_) {
		if (!(_rio_peer_ instanceof LogRecordKey)) {
			return false;
		}
		if (_rio_peer_ == this) {
			return true;
		}
		LogRecordKey _rio_peer = (LogRecordKey) _rio_peer_;
		boolean _rio_ret = false;
		_rio_ret = logId.equals(_rio_peer.logId);
		if (!_rio_ret)
			return _rio_ret;
		_rio_ret = dataType.equals(_rio_peer.dataType);
		if (!_rio_ret)
			return _rio_ret;
		_rio_ret = time.equals(_rio_peer.time);
		if (!_rio_ret)
			return _rio_ret;
		return _rio_ret;
	}

	public Object clone() throws CloneNotSupportedException {
		LogRecordKey _rio_other = new LogRecordKey();
		_rio_other.logId = this.logId;
		_rio_other.dataType = this.dataType;
		_rio_other.time = this.time;
		return _rio_other;
	}

	public int hashCode() {
		int _rio_result = 17;
		int _rio_ret;
		_rio_ret = logId.hashCode();
		_rio_result = 37 * _rio_result + _rio_ret;
		_rio_ret = dataType.hashCode();
		_rio_result = 37 * _rio_result + _rio_ret;
		_rio_ret = time.hashCode();
		_rio_result = 37 * _rio_result + _rio_ret;
		return _rio_result;
	}

    public void reset() {
        time = null;
        dataType = null;
        logId = null;
    }

    public static String signature() {
		return "LogRecordKey(ss)";
	}

	public static class Comparator extends
			org.apache.hadoop.record.RecordComparator {
		public Comparator() {
			super(LogRecordKey.class);
		}

		static public int slurpRaw(byte[] b, int s, int l) {
			try {
				int os = s;
				{
					int i = org.apache.hadoop.record.Utils.readVInt(b, s);
					int z = org.apache.hadoop.record.Utils.getVIntSize(i);
					s += (z + i);
					l -= (z + i);
				}
				{
					int i = org.apache.hadoop.record.Utils.readVInt(b, s);
					int z = org.apache.hadoop.record.Utils.getVIntSize(i);
					s += (z + i);
					l -= (z + i);
				}
				{
					int i = org.apache.hadoop.record.Utils.readVInt(b, s);
					int z = org.apache.hadoop.record.Utils.getVIntSize(i);
					s += (z + i);
					l -= (z + i);
				}
				return (os - s);
			} catch (java.io.IOException e) {
				throw new RuntimeException(e);
			}
		}

		static public int compareRaw(byte[] b1, int s1, int l1, byte[] b2,
				int s2, int l2) {
			try {
				int os1 = s1;
				{
					int i1 = org.apache.hadoop.record.Utils.readVInt(b1, s1);
					int i2 = org.apache.hadoop.record.Utils.readVInt(b2, s2);
					int z1 = org.apache.hadoop.record.Utils.getVIntSize(i1);
					int z2 = org.apache.hadoop.record.Utils.getVIntSize(i2);
					s1 += z1;
					s2 += z2;
					l1 -= z1;
					l2 -= z2;
					int r1 = org.apache.hadoop.record.Utils.compareBytes(b1,
							s1, i1, b2, s2, i2);
					if (r1 != 0) {
						return r1;
					}
					s1 += i1;
					s2 += i2;
					l1 -= i1;
					l1 -= i2;
				}
				{
					int i1 = org.apache.hadoop.record.Utils.readVInt(b1, s1);
					int i2 = org.apache.hadoop.record.Utils.readVInt(b2, s2);
					int z1 = org.apache.hadoop.record.Utils.getVIntSize(i1);
					int z2 = org.apache.hadoop.record.Utils.getVIntSize(i2);
					s1 += z1;
					s2 += z2;
					l1 -= z1;
					l2 -= z2;
					int r1 = org.apache.hadoop.record.Utils.compareBytes(b1,
							s1, i1, b2, s2, i2);
					if (r1 != 0) {
						return r1;
					}
					s1 += i1;
					s2 += i2;
					l1 -= i1;
					l1 -= i2;
				}
				{
					int i1 = org.apache.hadoop.record.Utils.readVInt(b1, s1);
					int i2 = org.apache.hadoop.record.Utils.readVInt(b2, s2);
					int z1 = org.apache.hadoop.record.Utils.getVIntSize(i1);
					int z2 = org.apache.hadoop.record.Utils.getVIntSize(i2);
					s1 += z1;
					s2 += z2;
					l1 -= z1;
					l2 -= z2;
					int r1 = org.apache.hadoop.record.Utils.compareBytes(b1,
							s1, i1, b2, s2, i2);
					if (r1 != 0) {
						return r1;
					}
					s1 += i1;
					s2 += i2;
					l1 -= i1;
					l1 -= i2;
				}
				return 0;
			} catch (java.io.IOException e) {
				throw new RuntimeException(e);
			}
		}

		public int compare(byte[] b1, int s1, int l1, byte[] b2, int s2, int l2) {
			return compareRaw(b1, s1, l1, b2, s2, l2);
		}
	}

	static {
		org.apache.hadoop.record.RecordComparator.define(LogRecordKey.class,
				new Comparator());
	}

	
}
